#include <string>
#include "it.h"

// Функция для вычисления 2^n - 1
std::string step(int n) {
    std::string r = "1"; // начальное значение для 2^0 
    for (int i = 0; i < n; i++) {
        int c = 0; // переменная переноса
        for (int j = r.length() - 1; j >= 0; j--) { // проходим по всем цифрам результата справа налево
            int d = (r[j] - '0') * 2 + c; // умножаем текущую цифру на 2 и добавляем перенос
            r[j] = (d % 10) + '0'; // сохраняем последнюю цифру
            c = d / 10; // обновляем перенос для следующей итерации
        }

        // Если после умножения остался перенос, добавляем его в начало результата
        while (c) {
            r.insert(r.begin(), (c % 10) + '0'); // добавляем каждую цифру переноса в начало строки
            c /= 10; // обновляем перенос
        }
    }

    // Вычитаем r - 1 (где r - это 2^n)
    int z = 1; // начальное значение для вычитания 1
    for (int j = r.length() - 1; j >= 0 && z; j--) {
        if (r[j] == '0') {
            r[j] = '9'; // если цифра 0, заменяем на 9 и продолжаем перенос
        }
        else {
            r[j]--; // уменьшаем текущую цифру на 1
            z = 0; // вычитание завершено, перенос больше не нужен
        }
    }

    // Удаляем ведущие нули, если они есть
    while (r.length() > 1 && r[0] == '0') {
        r.erase(r.begin());
    }

    return r;
}

// Функция для проверки корректности ввода
bool f(const std::string& input) {
    if (input.empty()) return false; // пустая строка не допустима
    for (char ch : input) {
        if (ch < '0' || ch > '9') { // проверяем, что каждый символ - это цифра
            return false;
        }
    }
    return true;
}
